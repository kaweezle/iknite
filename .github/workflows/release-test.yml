# cSpell: disable
name: Test release with GoReleaser

on:
  pull_request:
    branches: ["main"]

env:
  tf_version: "1.11.1"
  tg_version: "0.77.6"

jobs:
  goreleaser-snapshot:
    name: Test GoReleaser packaging
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ^1
      - name: Import Signature key
        shell: bash
        run: |
          echo -e "$GPG_PRIVATE_KEY" > kaweezle-devel@kaweezle.com-c9d89864.rsa
          chmod 600 kaweezle-devel@kaweezle.com-c9d89864.rsa
          openssl rsa -in kaweezle-devel@kaweezle.com-c9d89864.rsa -pubout -out kaweezle-devel@kaweezle.com-c9d89864.rsa.pub
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          cp kaweezle-devel@kaweezle.com-c9d89864.rsa ~/.ssh/id_rsa
          mkdir -p ~/.config/sops/age
          echo -e "$AGE_PRIVATE_KEY" > ~/.config/sops/age/keys.txt
          chmod 600 ~/.config/sops/age/keys.txt
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          AGE_PRIVATE_KEY: ${{ secrets.AGE_PRIVATE_KEY }}
      - name: Run GoReleaser Tests
        uses: goreleaser/goreleaser-action@v5
        with:
          version: "~> v2"
          args: --snapshot --skip=publish --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Build iknite images APK
        run: |
          docker run --rm --privileged \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd):/work \
            cgr.dev/chainguard/melange build support/apk/iknite-images.yaml \
            --arch $(uname -m) \
            --signing-key kaweezle-devel@kaweezle.com-c9d89864.rsa \
            --generate-index=false
          sudo chown -R $(id -u):$(id -g) packages
          (cd packages/$(uname -m)/ && \
           sha256sum *.apk >>../../dist/SHA256SUMS && \
           for f in *.apk; do mv $f ../../dist/$(echo $f | sed 's/\-r0.apk$//').$(uname -m).apk; done)
      - name: Upload assets
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: |
            dist/*.apk
            dist/metadata.json
            dist/SHA256SUMS
      - name: Download krmfnbuiltin apk
        run: |
          cd dist
          LATEST_VERSION=$(curl --silent  https://api.github.com/repos/kaweezle/krmfnbuiltin/releases/latest | jq -r .tag_name)
          curl -O -L "https://github.com/kaweezle/krmfnbuiltin/releases/download/${LATEST_VERSION}/krmfnbuiltin-${LATEST_VERSION#v}.x86_64.apk"
          curl -O -L "https://github.com/kaweezle/krmfnbuiltin/releases/download/${LATEST_VERSION}/krmfnbuiltin-${LATEST_VERSION#v}.i386.apk"
          cd ..
      - name: Build APK repo
        uses: ./.github/actions/make-apkindex
        with:
          apk_files: dist/*.apk
          signature_key: "${{ secrets.GPG_PRIVATE_KEY }}"
          signature_key_name: kaweezle-devel@kaweezle.com-c9d89864.rsa
          destination: dist/repo
      - name: Upload APK repo
        run: |
          echo "::group::Instaling tenv"
          LATEST_VERSION=$(curl --silent https://api.github.com/repos/tofuutils/tenv/releases/latest | jq -r .tag_name)
          curl -O -L "https://github.com/tofuutils/tenv/releases/latest/download/tenv_${LATEST_VERSION}_amd64.deb"
          sudo dpkg -i "tenv_${LATEST_VERSION}_amd64.deb"
          echo "::endgroup::"

          echo "::group::Installing terraform ($tf_version) and terragrunt ($tg_version)"
          tenv tf install $tf_version
          tenv tg install $tg_version
          echo "::endgroup::"

          echo "::group::Running terragrunt module"
          export TF_PLUGIN_CACHE_DIR="$HOME/.cache/terraform/plugin-cache"
          mkdir -p $TF_PLUGIN_CACHE_DIR
          cd support/iac/iknite/testrepo
          terragrunt init
          terragrunt apply -auto-approve
          echo "::endgroup::"

  build-rootfs:
    name: Build Root Filesystem for WSL
    needs: [goreleaser-snapshot]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:master
          buildkitd-flags: "--allow-insecure-entitlement security.insecure"

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-single-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-single-buildx

      - name: Get built apks
        uses: actions/download-artifact@v4
        with:
          name: packages
          path: packages

      - name: Build root fs
        run: |
          export IKNITE_VERSION=$(jq -Mr ".version" packages/metadata.json)
          export IKNITE_LAST_TAG=$(jq -Mr ".tag" packages/metadata.json)
          echo "Version is $IKNITE_VERSION"
          mv packages/iknite-${IKNITE_VERSION}.x86_64.apk packages/iknite-images-*.apk rootfs
          cd rootfs
          mkdir -p /tmp/.buildx-cache
          mkdir -p /tmp/.buildx-cache-new
          docker buildx build \
             --build-arg IKNITE_REPO_URL=http://kwzl-apkrepo.s3-website.gra.io.cloud.ovh.net/test/ \
             --build-arg IKNITE_VERSION=$IKNITE_VERSION \
             --build-arg IKNITE_LAST_TAG=$IKNITE_LAST_TAG \
             --allow security.insecure \
             --cache-from type=local,src=/tmp/.buildx-cache \
             --cache-to type=local,dest=/tmp/.buildx-cache-new \
             --output type=tar . | gzip >kaweezle.rootfs.tar.gz
          sha256sum kaweezle.rootfs.tar.gz >> ../packages/SHA256SUMS

      - name: Upload root fs artifact
        uses: actions/upload-artifact@v4
        with:
          name: rootfs
          path: |
            rootfs/kaweezle.rootfs.tar.gz
            packages/SHA256SUMS

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
